  !--------------------------------------------------------------
  ! boundary conditions
  ! P -> periodic, D -> Dirichlet, N -> Neumann
  !--------------------------------------------------------------
  ! velocity
  !
    character(len=1), parameter, dimension(0:1,3,3) ::  cbcvel = &
      reshape((/'P','P',   & ! u in x lower,upper bound
                'P','P',   & ! u in y lower,upper bound
                'P','P',   & ! u in z lower,upper bound
                'P','P',   & ! v in x lower,upper bound
                'P','P',   & ! v in y lower,upper bound
                'P','P',   & ! v in z lower,upper bound
                'P','P',   & ! w in x lower,upper bound
                'P','P',   & ! w in y lower,upper bound
                'P','P'/), & ! w in z lower,upper bound
                shape(cbcvel))
  ! values pertaining to the velocity BCs (arbitrary for 'P')
      real(8)         , parameter, dimension(0:1,3,3) :: bcvel = &
        reshape((/0.d0,0.d0,   & 
                  0.d0,0.d0,   &
                  0.d0,0.d0,   &
                  0.d0,0.d0,   &
                  0.d0,0.d0,   &
                  0.d0,0.d0,   &
                  0.d0,0.d0,   &
                  0.d0,0.d0,   &
                  0.d0,0.d0/), &
                  shape(bcvel))
  !-------------------------------------------------------------------
  ! pressure (homogeneous)
  !
    character(len=1), parameter, dimension(0:1,3) ::  cbcpre = &
      reshape((/'P','P',   & ! p in x lower,upper bound
                'P','P',   & ! p in y lower,upper bound
                'P','P'/), & ! p in z lower,upper bound
                shape(cbcpre))
    real(8)         , parameter, dimension(0:1,3) ::   bcpre = &
      reshape((/0.d0,0.d0,   & ! p in x lower,upper bound
                0.d0,0.d0,   & ! p in y lower,upper bound
                0.d0,0.d0/), & ! p in z lower,upper bound
                shape(bcpre))
  !-------------------------------------------------------------------
  ! forcing the flow with a pressure gradient
  ! that balances the total wall shear 
  ! (e.g. for a pressure-driven channel) 
  !
  logical, parameter, dimension(3) :: is_forced = & 
      reshape((/.false. ,   & !  in x
                .false. ,   & !  in y
                .false. /), & !  in z
                shape(is_forced))
  !
  ! desired values of bulk velocities 
  ! (only relevant if the corresponding boolean
  !  above is .true.)
  !
  real(8), parameter, dimension(3) :: velf = & 
      reshape((/0.d0,   & !  in x
                0.d0,   & !  in y
                0.d0/), & !  in z
                shape(velf))
  !
  ! outflow boundary condition
  ! if is_outflow(i,j) is true, an outflow condition is prescribed for the
  ! face-centered velocity at that boundary
  ! the outflow BC is determined from the condition of zero divergence
  !
  logical, parameter, dimension(0:1,3) :: is_outflow = & 
      reshape((/.false. ,.false. ,   & ! outflow in x lower,upper bound
                .false. ,.false. ,   & ! outflow in y lower,upper bound
                .false. ,.false. /), & ! outflow in z lower,upper bound
                shape(is_outflow))
