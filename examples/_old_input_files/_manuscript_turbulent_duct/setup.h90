   ! total number of points in x, y and z
   integer, parameter :: itot = 512, jtot = 128, ktot = 128
   ! domain length in x, y and z
   real(8), parameter :: lx =10.d0, ly = 1.0d0, lz = 1.d0
   real(8), parameter :: dx = lx/(1.d0*itot), & ! grid parameters
                         dy = ly/(1.d0*jtot), &
                         dz = lz/(1.d0*ktot), &
                         dxi    = dx**(-1),   &
                         dyi    = dy**(-1),   &
                         dzi    = dz**(-1),   &
                         dzmin  = dz      ,   &
                         gr     = 0.0d0 ! grid stretching parameter (0. -> no stretching;
                                        !                            see initgrid.f90)
   real(8), parameter :: cfl = .95d0
   real(8), parameter :: rey = 4410.d0, uref = 1.d0, lref = lz/2.d0, visc = uref*(2.d0*lref)/rey
   !
   include 'bc.h90' ! boundary conditions file
   !
   ! type of initial velocity field (see init.f90)
   ! iniu = 'cou' --> plane Couette flow                    (u->streamwise velocity in x dir)
   !      = 'poi' --> plane Poiseuille flow                 (u->streamwise velocity in x dir)
   !      = 'zer' --> zero velocity everywhere
   !      = 'log' --> logarithmic profile + noise           (u->streamwise velocity in x dir)
   !      = 'hcl' --> half channel with log profile + noise (u->streamwise velocity in x dir)
   !      = 'hcp' --> half channel with poiseuille profile  (u->streamwise velocity in x dir)
   !      = 'tgv' --> Taylor-Green vortex
   character(len=3), parameter :: inivel = 'poi'
   !
   ! is_wallturb: if .true., generates an initial condition that triggers transition to turbulence in wall-bounded flows (assumes streamwise direction x)
   logical, parameter :: is_wallturb = .true.
   !
   integer, parameter :: nstep = 100000 ! number of time steps
   logical, parameter :: restart = .false. ! restart or not from a checkpoint
   !
   ! -> every *icheck* time steps compute the new time step size dt
   ! according to the new stability criterion and cfl (above)
   ! -> every *iout0d* time steps update the history files with global scalar variables;
   ! currently the forcing pressure gradient and time step history are reported
   ! -> every *iout1d* time steps write 1d profiles (velocity and its moments)
   ! to a file
   ! -> every *iout2d* time steps write a 2d slice of a 3d scalar field to a file
   ! -> every *iout3d* time steps write a 3d scalar field into a file
   ! -> every *isave*  time steps write a checkpoint file
   ! note: in order to edit the outputs based on the specific flow case, edit 
   ! main.f90 or even output.f90 accordingly. Currently these assume the z to be
   ! an inhomogeneous direction.
   !
   integer, parameter :: icheck =  10, iout0d =    10, iout1d =  100, &
                         iout2d = 500, iout3d = 10000, isave  = 5000
   !
   ! grid of computational subdomains
   integer, parameter, dimension(2) :: dims = (/2,2/)
   ! x and y sizes of local arrays in the basic 2D z-pencil decomposition
   integer, parameter :: imax = itot/dims(1), jmax = jtot/dims(2)
   !
   ! number of OpenMP threads
   integer, parameter :: nthreadsmax = 4
